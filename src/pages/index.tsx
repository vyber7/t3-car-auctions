/*

import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";

export default function Home() {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}


*/

import Head from "next/head";

import Image from "next/image";
import { api } from "~/utils/api";

/**
 * This is a home page.
 * @returns {JSX.Element}: The JSX Code for Home Page.
 */

export default function Home(): JSX.Element {
  const cars = api.example.getVehicles.useQuery();
  console.log(cars.data);
  return (
    <div className="m-auto mt-11 flex max-w-5xl gap-5 bg-gray-200 pl-10 pr-8">
      <Head>
        <title>Car Auctions</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/images/logo.png" />
      </Head>

      <main className="md:w-3/4">
        <h2 className="pt-5 text-lg font-semibold">Featured Auctions</h2>
        <div>
          {cars.data ? (
            <ul className="flex flex-col gap-5 py-5">
              {cars.data.map((car) => (
                <li className="" key={car.id}>
                  <div className="group flex flex-col flex-wrap rounded border border-gray-300 transition-all hover:border-gray-600 hover:bg-gray-300 lg:flex-row">
                    <h3 className="w-full p-2 text-center text-xl font-bold">
                      {car.year} {car.make} {car.model}
                    </h3>
                    <div className="flex w-auto flex-col rounded-t lg:w-1/3 lg:rounded-l">
                      <Image
                        src="/images/default-car-image.png"
                        alt="Car Image"
                        width={400}
                        height={200}
                        className="w-auto rounded-t lg:rounded-t-none lg:rounded-tl"
                      />
                      <p className="flex justify-between p-3">
                        <span>{car.miles} miles</span>
                        <span>${car.price}</span>
                      </p>
                    </div>
                    <div className="relative px-3 pb-8 lg:w-2/3">
                      <p className="relative h-36 overflow-hidden after:absolute after:bottom-0 after:left-0 after:h-20 after:w-full after:bg-gradient-to-t after:from-gray-200 group-hover:after:from-gray-300">
                        {car.description}
                      </p>
                      <button className="z-1 absolute bottom-2 right-1/2 translate-x-1/2 rounded bg-gray-200 px-2 text-green-800">
                        Read more...
                      </button>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p>No cars found.</p>
          )}
        </div>
      </main>
      <aside className="hidden md:block md:w-1/4">
        <h2 className="pt-5 text-lg font-semibold">Current Auctions</h2>
        <div className="current_auctions">
          {cars.data ? (
            <ul className="flex flex-wrap py-5">
              {cars.data.map((car) => (
                <li className="w-1/2" key={car.id}>
                  <div className="border border-gray-300">
                    <Image
                      src="/images/default-car-image.png"
                      alt="Car Image"
                      width={200}
                      height={200}
                    />
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p>No cars found.</p>
          )}
        </div>
      </aside>
    </div>
  );
}

/*

p {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: pre-wrap;
  word-wrap: break-word;
}






interface Vehicle {
  id: string;
  year: string;
  make: string;
  model: string;
  miles: string;
  description: string;
  
  price: number;
  image: string;
}

export async function getServerSideProps(): Promise<{ props: { vehicles: Vehicle[] } }> {
  const prisma = new PrismaClient();
  const vehicles: Vehicle[] = await prisma.vehicle.findMany();
  vehicles.reverse();
  return { props: { vehicles } };
}
*/
